//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2015/6/17 16:05:14
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace FooddbContext
{

    [DatabaseAttribute(Name = "fooddb")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class FooddbDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(FooddbDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertCheckup(Checkup instance);
        partial void UpdateCheckup(Checkup instance);
        partial void DeleteCheckup(Checkup instance);
        partial void InsertCheckupReport(CheckupReport instance);
        partial void UpdateCheckupReport(CheckupReport instance);
        partial void DeleteCheckupReport(CheckupReport instance);
        partial void InsertFoodCategory(FoodCategory instance);
        partial void UpdateFoodCategory(FoodCategory instance);
        partial void DeleteFoodCategory(FoodCategory instance);
        partial void InsertFoodRecommendation(FoodRecommendation instance);
        partial void UpdateFoodRecommendation(FoodRecommendation instance);
        partial void DeleteFoodRecommendation(FoodRecommendation instance);
        partial void InsertFoodRecommendationJson(FoodRecommendationJson instance);
        partial void UpdateFoodRecommendationJson(FoodRecommendationJson instance);
        partial void DeleteFoodRecommendationJson(FoodRecommendationJson instance);
        partial void InsertNoteBox(NoteBox instance);
        partial void UpdateNoteBox(NoteBox instance);
        partial void DeleteNoteBox(NoteBox instance);
        partial void InsertNoteBoxTemplate(NoteBoxTemplate instance);
        partial void UpdateNoteBoxTemplate(NoteBoxTemplate instance);
        partial void DeleteNoteBoxTemplate(NoteBoxTemplate instance);
        partial void InsertNoteRecord(NoteRecord instance);
        partial void UpdateNoteRecord(NoteRecord instance);
        partial void DeleteNoteRecord(NoteRecord instance);
        partial void InsertNoteRecordItem(NoteRecordItem instance);
        partial void UpdateNoteRecordItem(NoteRecordItem instance);
        partial void DeleteNoteRecordItem(NoteRecordItem instance);
        partial void InsertPlanReminder(PlanReminder instance);
        partial void UpdatePlanReminder(PlanReminder instance);
        partial void DeletePlanReminder(PlanReminder instance);
        partial void InsertPlanReminderLog(PlanReminderLog instance);
        partial void UpdatePlanReminderLog(PlanReminderLog instance);
        partial void DeletePlanReminderLog(PlanReminderLog instance);
        partial void InsertSymptomFood(SymptomFood instance);
        partial void UpdateSymptomFood(SymptomFood instance);
        partial void DeleteSymptomFood(SymptomFood instance);
        partial void InsertUserFoodSentiment(UserFoodSentiment instance);
        partial void UpdateUserFoodSentiment(UserFoodSentiment instance);
        partial void DeleteUserFoodSentiment(UserFoodSentiment instance);
        partial void InsertUserPregnant(UserPregnant instance);
        partial void UpdateUserPregnant(UserPregnant instance);
        partial void DeleteUserPregnant(UserPregnant instance);
        partial void InsertUserProfile(UserProfile instance);
        partial void UpdateUserProfile(UserProfile instance);
        partial void DeleteUserProfile(UserProfile instance);
        partial void InsertUserProfileExtension(UserProfileExtension instance);
        partial void UpdateUserProfileExtension(UserProfileExtension instance);
        partial void DeleteUserProfileExtension(UserProfileExtension instance);
        partial void InsertUserProfileMeta(UserProfileMeta instance);
        partial void UpdateUserProfileMeta(UserProfileMeta instance);
        partial void DeleteUserProfileMeta(UserProfileMeta instance);
        partial void InsertUserSymptom(UserSymptom instance);
        partial void UpdateUserSymptom(UserSymptom instance);
        partial void DeleteUserSymptom(UserSymptom instance);
        partial void InsertUserSymptomMeta(UserSymptomMeta instance);
        partial void UpdateUserSymptomMeta(UserSymptomMeta instance);
        partial void DeleteUserSymptomMeta(UserSymptomMeta instance);

        #endregion

        public FooddbDataContext() :
        base(GetConnectionString("FooddbDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public FooddbDataContext(MappingSource mappingSource) :
        base(GetConnectionString("FooddbDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public FooddbDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FooddbDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FooddbDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public FooddbDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Checkup> Checkups
        {
            get
            {
                return this.GetTable<Checkup>();
            }
        }

        public Devart.Data.Linq.Table<CheckupReport> CheckupReports
        {
            get
            {
                return this.GetTable<CheckupReport>();
            }
        }

        public Devart.Data.Linq.Table<FoodCategory> FoodCategories
        {
            get
            {
                return this.GetTable<FoodCategory>();
            }
        }

        public Devart.Data.Linq.Table<FoodMain> FoodMains
        {
            get
            {
                return this.GetTable<FoodMain>();
            }
        }

        public Devart.Data.Linq.Table<FoodNutrition> FoodNutritions
        {
            get
            {
                return this.GetTable<FoodNutrition>();
            }
        }

        public Devart.Data.Linq.Table<FoodRecommendation> FoodRecommendations
        {
            get
            {
                return this.GetTable<FoodRecommendation>();
            }
        }

        public Devart.Data.Linq.Table<FoodRecommendationJson> FoodRecommendationJsons
        {
            get
            {
                return this.GetTable<FoodRecommendationJson>();
            }
        }

        public Devart.Data.Linq.Table<NoteBox> NoteBoxes
        {
            get
            {
                return this.GetTable<NoteBox>();
            }
        }

        public Devart.Data.Linq.Table<NoteBoxTemplate> NoteBoxTemplates
        {
            get
            {
                return this.GetTable<NoteBoxTemplate>();
            }
        }

        public Devart.Data.Linq.Table<NoteRecord> NoteRecords
        {
            get
            {
                return this.GetTable<NoteRecord>();
            }
        }

        public Devart.Data.Linq.Table<NoteRecordItem> NoteRecordItems
        {
            get
            {
                return this.GetTable<NoteRecordItem>();
            }
        }

        public Devart.Data.Linq.Table<PlanReminder> PlanReminders
        {
            get
            {
                return this.GetTable<PlanReminder>();
            }
        }

        public Devart.Data.Linq.Table<PlanReminderLog> PlanReminderLogs
        {
            get
            {
                return this.GetTable<PlanReminderLog>();
            }
        }

        public Devart.Data.Linq.Table<SymptomFood> SymptomFoods
        {
            get
            {
                return this.GetTable<SymptomFood>();
            }
        }

        public Devart.Data.Linq.Table<UserFoodSentiment> UserFoodSentiments
        {
            get
            {
                return this.GetTable<UserFoodSentiment>();
            }
        }

        public Devart.Data.Linq.Table<UserPregnant> UserPregnants
        {
            get
            {
                return this.GetTable<UserPregnant>();
            }
        }

        public Devart.Data.Linq.Table<UserProfile> UserProfiles
        {
            get
            {
                return this.GetTable<UserProfile>();
            }
        }

        public Devart.Data.Linq.Table<UserProfileExtension> UserProfileExtensions
        {
            get
            {
                return this.GetTable<UserProfileExtension>();
            }
        }

        public Devart.Data.Linq.Table<UserProfileMeta> UserProfileMetas
        {
            get
            {
                return this.GetTable<UserProfileMeta>();
            }
        }

        public Devart.Data.Linq.Table<UserSymptom> UserSymptoms
        {
            get
            {
                return this.GetTable<UserSymptom>();
            }
        }

        public Devart.Data.Linq.Table<UserSymptomMeta> UserSymptomMetas
        {
            get
            {
                return this.GetTable<UserSymptomMeta>();
            }
        }
    }
}

namespace FooddbContext
{

    /// <summary>
    /// There are no comments for FooddbContext.Checkup in the schema.
    /// </summary>
    [Table(Name = @"fooddb.checkup")]
    public partial class Checkup : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _UserId;

        private string _CheckDesc;

        private System.Nullable<System.DateTime> _PlanDate;

        private System.Nullable<System.DateTime> _ActDate;

        private System.Nullable<int> _Weeks;

        private System.Nullable<int> _Months;

        private System.Nullable<int> _Status;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnCheckDescChanging(string value);
        partial void OnCheckDescChanged();
        partial void OnPlanDateChanging(System.Nullable<System.DateTime> value);
        partial void OnPlanDateChanged();
        partial void OnActDateChanging(System.Nullable<System.DateTime> value);
        partial void OnActDateChanged();
        partial void OnWeeksChanging(System.Nullable<int> value);
        partial void OnWeeksChanged();
        partial void OnMonthsChanging(System.Nullable<int> value);
        partial void OnMonthsChanged();
        partial void OnStatusChanging(System.Nullable<int> value);
        partial void OnStatusChanged();
        #endregion

        public Checkup()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CheckDesc in the schema.
        /// </summary>
        [Column(Name = @"check_desc", Storage = "_CheckDesc", DbType = "VARCHAR(500) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CheckDesc
        {
            get
            {
                return this._CheckDesc;
            }
            set
            {
                if (this._CheckDesc != value)
                {
                    this.OnCheckDescChanging(value);
                    this.SendPropertyChanging();
                    this._CheckDesc = value;
                    this.SendPropertyChanged("CheckDesc");
                    this.OnCheckDescChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PlanDate in the schema.
        /// </summary>
        [Column(Name = @"plan_date", Storage = "_PlanDate", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> PlanDate
        {
            get
            {
                return this._PlanDate;
            }
            set
            {
                if (this._PlanDate != value)
                {
                    this.OnPlanDateChanging(value);
                    this.SendPropertyChanging();
                    this._PlanDate = value;
                    this.SendPropertyChanged("PlanDate");
                    this.OnPlanDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ActDate in the schema.
        /// </summary>
        [Column(Name = @"act_date", Storage = "_ActDate", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ActDate
        {
            get
            {
                return this._ActDate;
            }
            set
            {
                if (this._ActDate != value)
                {
                    this.OnActDateChanging(value);
                    this.SendPropertyChanging();
                    this._ActDate = value;
                    this.SendPropertyChanged("ActDate");
                    this.OnActDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Weeks in the schema.
        /// </summary>
        [Column(Name = @"weeks", Storage = "_Weeks", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Weeks
        {
            get
            {
                return this._Weeks;
            }
            set
            {
                if (this._Weeks != value)
                {
                    this.OnWeeksChanging(value);
                    this.SendPropertyChanging();
                    this._Weeks = value;
                    this.SendPropertyChanged("Weeks");
                    this.OnWeeksChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Months in the schema.
        /// </summary>
        [Column(Name = @"months", Storage = "_Months", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Months
        {
            get
            {
                return this._Months;
            }
            set
            {
                if (this._Months != value)
                {
                    this.OnMonthsChanging(value);
                    this.SendPropertyChanging();
                    this._Months = value;
                    this.SendPropertyChanged("Months");
                    this.OnMonthsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.CheckupReport in the schema.
    /// </summary>
    [Table(Name = @"fooddb.checkup_report")]
    public partial class CheckupReport : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private System.Nullable<int> _CheckId;

        private string _Desc;

        private byte[] _ReportFile;

        private System.Nullable<int> _NeedReminding;

        private System.Nullable<System.DateTime> _TimeStamp;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnCheckIdChanging(System.Nullable<int> value);
        partial void OnCheckIdChanged();
        partial void OnDescChanging(string value);
        partial void OnDescChanged();
        partial void OnReportFileChanging(byte[] value);
        partial void OnReportFileChanged();
        partial void OnNeedRemindingChanging(System.Nullable<int> value);
        partial void OnNeedRemindingChanged();
        partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
        partial void OnTimeStampChanged();
        #endregion

        public CheckupReport()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CheckId in the schema.
        /// </summary>
        [Column(Name = @"check_id", Storage = "_CheckId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CheckId
        {
            get
            {
                return this._CheckId;
            }
            set
            {
                if (this._CheckId != value)
                {
                    this.OnCheckIdChanging(value);
                    this.SendPropertyChanging();
                    this._CheckId = value;
                    this.SendPropertyChanged("CheckId");
                    this.OnCheckIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Desc in the schema.
        /// </summary>
        [Column(Name = @"`desc`", Storage = "_Desc", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Desc
        {
            get
            {
                return this._Desc;
            }
            set
            {
                if (this._Desc != value)
                {
                    this.OnDescChanging(value);
                    this.SendPropertyChanging();
                    this._Desc = value;
                    this.SendPropertyChanged("Desc");
                    this.OnDescChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ReportFile in the schema.
        /// </summary>
        [Column(Name = @"report_file", Storage = "_ReportFile", DbType = "BLOB NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] ReportFile
        {
            get
            {
                return this._ReportFile;
            }
            set
            {
                if (this._ReportFile != value)
                {
                    this.OnReportFileChanging(value);
                    this.SendPropertyChanging();
                    this._ReportFile = value;
                    this.SendPropertyChanged("ReportFile");
                    this.OnReportFileChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NeedReminding in the schema.
        /// </summary>
        [Column(Name = @"need_reminding", Storage = "_NeedReminding", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> NeedReminding
        {
            get
            {
                return this._NeedReminding;
            }
            set
            {
                if (this._NeedReminding != value)
                {
                    this.OnNeedRemindingChanging(value);
                    this.SendPropertyChanging();
                    this._NeedReminding = value;
                    this.SendPropertyChanged("NeedReminding");
                    this.OnNeedRemindingChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TimeStamp in the schema.
        /// </summary>
        [Column(Name = @"time_stamp", Storage = "_TimeStamp", DbType = "TIMESTAMP(6) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> TimeStamp
        {
            get
            {
                return this._TimeStamp;
            }
            set
            {
                if (this._TimeStamp != value)
                {
                    this.OnTimeStampChanging(value);
                    this.SendPropertyChanging();
                    this._TimeStamp = value;
                    this.SendPropertyChanged("TimeStamp");
                    this.OnTimeStampChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.FoodCategory in the schema.
    /// </summary>
    [Table(Name = @"fooddb.food_category")]
    public partial class FoodCategory : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _CateId;

        private System.Nullable<int> _ParentId;

        private string _CateName;

        private string _Note;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCateIdChanging(int value);
        partial void OnCateIdChanged();
        partial void OnParentIdChanging(System.Nullable<int> value);
        partial void OnParentIdChanged();
        partial void OnCateNameChanging(string value);
        partial void OnCateNameChanged();
        partial void OnNoteChanging(string value);
        partial void OnNoteChanged();
        #endregion

        public FoodCategory()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CateId in the schema.
        /// </summary>
        [Column(Name = @"cate_id", Storage = "_CateId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int CateId
        {
            get
            {
                return this._CateId;
            }
            set
            {
                if (this._CateId != value)
                {
                    this.OnCateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CateId = value;
                    this.SendPropertyChanged("CateId");
                    this.OnCateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ParentId in the schema.
        /// </summary>
        [Column(Name = @"parent_id", Storage = "_ParentId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ParentId
        {
            get
            {
                return this._ParentId;
            }
            set
            {
                if (this._ParentId != value)
                {
                    this.OnParentIdChanging(value);
                    this.SendPropertyChanging();
                    this._ParentId = value;
                    this.SendPropertyChanged("ParentId");
                    this.OnParentIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CateName in the schema.
        /// </summary>
        [Column(Name = @"cate_name", Storage = "_CateName", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CateName
        {
            get
            {
                return this._CateName;
            }
            set
            {
                if (this._CateName != value)
                {
                    this.OnCateNameChanging(value);
                    this.SendPropertyChanging();
                    this._CateName = value;
                    this.SendPropertyChanged("CateName");
                    this.OnCateNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Note in the schema.
        /// </summary>
        [Column(Name = @"note", Storage = "_Note", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Note
        {
            get
            {
                return this._Note;
            }
            set
            {
                if (this._Note != value)
                {
                    this.OnNoteChanging(value);
                    this.SendPropertyChanging();
                    this._Note = value;
                    this.SendPropertyChanged("Note");
                    this.OnNoteChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.FoodMain in the schema.
    /// </summary>
    [Table(Name = @"fooddb.food_main")]
    public partial class FoodMain
    {
        #pragma warning disable 0649

        private int _ID;

        private string _FName;

        private string _FDiscription;

        private string _FEfficacy;

        private string _FTaboo;

        private string _FFit;

        private string _FCharacter;

        private string _FPicture;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnFNameChanging(string value);
        partial void OnFNameChanged();
        partial void OnFDiscriptionChanging(string value);
        partial void OnFDiscriptionChanged();
        partial void OnFEfficacyChanging(string value);
        partial void OnFEfficacyChanged();
        partial void OnFTabooChanging(string value);
        partial void OnFTabooChanged();
        partial void OnFFitChanging(string value);
        partial void OnFFitChanged();
        partial void OnFCharacterChanging(string value);
        partial void OnFCharacterChanged();
        partial void OnFPictureChanging(string value);
        partial void OnFPictureChanged();
        #endregion

        public FoodMain()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this._ID = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FName in the schema.
        /// </summary>
        [Column(Name = @"fName", Storage = "_FName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FName
        {
            get
            {
                return this._FName;
            }
            set
            {
                if (this._FName != value)
                {
                    this._FName = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FDiscription in the schema.
        /// </summary>
        [Column(Name = @"fDiscription", Storage = "_FDiscription", DbType = "VARCHAR(8000) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FDiscription
        {
            get
            {
                return this._FDiscription;
            }
            set
            {
                if (this._FDiscription != value)
                {
                    this._FDiscription = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FEfficacy in the schema.
        /// </summary>
        [Column(Name = @"fEfficacy", Storage = "_FEfficacy", DbType = "VARCHAR(500) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FEfficacy
        {
            get
            {
                return this._FEfficacy;
            }
            set
            {
                if (this._FEfficacy != value)
                {
                    this._FEfficacy = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FTaboo in the schema.
        /// </summary>
        [Column(Name = @"fTaboo", Storage = "_FTaboo", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FTaboo
        {
            get
            {
                return this._FTaboo;
            }
            set
            {
                if (this._FTaboo != value)
                {
                    this._FTaboo = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FFit in the schema.
        /// </summary>
        [Column(Name = @"fFit", Storage = "_FFit", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FFit
        {
            get
            {
                return this._FFit;
            }
            set
            {
                if (this._FFit != value)
                {
                    this._FFit = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FCharacter in the schema.
        /// </summary>
        [Column(Name = @"fCharacter", Storage = "_FCharacter", DbType = "VARCHAR(100) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FCharacter
        {
            get
            {
                return this._FCharacter;
            }
            set
            {
                if (this._FCharacter != value)
                {
                    this._FCharacter = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FPicture in the schema.
        /// </summary>
        [Column(Name = @"fPicture", Storage = "_FPicture", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FPicture
        {
            get
            {
                return this._FPicture;
            }
            set
            {
                if (this._FPicture != value)
                {
                    this._FPicture = value;
                }
            }
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.FoodNutrition in the schema.
    /// </summary>
    [Table(Name = @"fooddb.food_nutrition")]
    public partial class FoodNutrition
    {
        #pragma warning disable 0649

        private int _ID;

        private System.Nullable<int> _FoodID;

        private string _NName;

        private string _NNumber;

        private string _NUnit;

        private string _NPerWeight;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnFoodIDChanging(System.Nullable<int> value);
        partial void OnFoodIDChanged();
        partial void OnNNameChanging(string value);
        partial void OnNNameChanged();
        partial void OnNNumberChanging(string value);
        partial void OnNNumberChanged();
        partial void OnNUnitChanging(string value);
        partial void OnNUnitChanged();
        partial void OnNPerWeightChanging(string value);
        partial void OnNPerWeightChanged();
        #endregion

        public FoodNutrition()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this._ID = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FoodID in the schema.
        /// </summary>
        [Column(Name = @"foodID", Storage = "_FoodID", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> FoodID
        {
            get
            {
                return this._FoodID;
            }
            set
            {
                if (this._FoodID != value)
                {
                    this._FoodID = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NName in the schema.
        /// </summary>
        [Column(Name = @"nName", Storage = "_NName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NName
        {
            get
            {
                return this._NName;
            }
            set
            {
                if (this._NName != value)
                {
                    this._NName = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NNumber in the schema.
        /// </summary>
        [Column(Name = @"nNumber", Storage = "_NNumber", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NNumber
        {
            get
            {
                return this._NNumber;
            }
            set
            {
                if (this._NNumber != value)
                {
                    this._NNumber = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NUnit in the schema.
        /// </summary>
        [Column(Name = @"nUnit", Storage = "_NUnit", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NUnit
        {
            get
            {
                return this._NUnit;
            }
            set
            {
                if (this._NUnit != value)
                {
                    this._NUnit = value;
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NPerWeight in the schema.
        /// </summary>
        [Column(Name = @"nPerWeight", Storage = "_NPerWeight", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NPerWeight
        {
            get
            {
                return this._NPerWeight;
            }
            set
            {
                if (this._NPerWeight != value)
                {
                    this._NPerWeight = value;
                }
            }
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.FoodRecommendation in the schema.
    /// </summary>
    [Table(Name = @"fooddb.food_recommendation")]
    public partial class FoodRecommendation : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _UserId;

        private string _SerialCode;

        private System.Nullable<int> _FoodId;

        private System.Nullable<int> _RecipeId;

        private System.Nullable<System.DateTime> _RecoDate;

        private System.Nullable<int> _RecoPeriod;

        private System.Nullable<int> _RecoFrequency;

        private System.Nullable<System.DateTime> _AddDate;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnSerialCodeChanging(string value);
        partial void OnSerialCodeChanged();
        partial void OnFoodIdChanging(System.Nullable<int> value);
        partial void OnFoodIdChanged();
        partial void OnRecipeIdChanging(System.Nullable<int> value);
        partial void OnRecipeIdChanged();
        partial void OnRecoDateChanging(System.Nullable<System.DateTime> value);
        partial void OnRecoDateChanged();
        partial void OnRecoPeriodChanging(System.Nullable<int> value);
        partial void OnRecoPeriodChanged();
        partial void OnRecoFrequencyChanging(System.Nullable<int> value);
        partial void OnRecoFrequencyChanged();
        partial void OnAddDateChanging(System.Nullable<System.DateTime> value);
        partial void OnAddDateChanged();
        #endregion

        public FoodRecommendation()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SerialCode in the schema.
        /// </summary>
        [Column(Name = @"serial_code", Storage = "_SerialCode", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string SerialCode
        {
            get
            {
                return this._SerialCode;
            }
            set
            {
                if (this._SerialCode != value)
                {
                    this.OnSerialCodeChanging(value);
                    this.SendPropertyChanging();
                    this._SerialCode = value;
                    this.SendPropertyChanged("SerialCode");
                    this.OnSerialCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FoodId in the schema.
        /// </summary>
        [Column(Name = @"food_id", Storage = "_FoodId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> FoodId
        {
            get
            {
                return this._FoodId;
            }
            set
            {
                if (this._FoodId != value)
                {
                    this.OnFoodIdChanging(value);
                    this.SendPropertyChanging();
                    this._FoodId = value;
                    this.SendPropertyChanged("FoodId");
                    this.OnFoodIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecipeId in the schema.
        /// </summary>
        [Column(Name = @"recipe_id", Storage = "_RecipeId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> RecipeId
        {
            get
            {
                return this._RecipeId;
            }
            set
            {
                if (this._RecipeId != value)
                {
                    this.OnRecipeIdChanging(value);
                    this.SendPropertyChanging();
                    this._RecipeId = value;
                    this.SendPropertyChanged("RecipeId");
                    this.OnRecipeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// ???????
        /// </summary>
        [Column(Name = @"reco_date", Storage = "_RecoDate", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> RecoDate
        {
            get
            {
                return this._RecoDate;
            }
            set
            {
                if (this._RecoDate != value)
                {
                    this.OnRecoDateChanging(value);
                    this.SendPropertyChanging();
                    this._RecoDate = value;
                    this.SendPropertyChanged("RecoDate");
                    this.OnRecoDateChanged();
                }
            }
        }

    
        /// <summary>
        /// ???????????
        /// </summary>
        [Column(Name = @"reco_period", Storage = "_RecoPeriod", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> RecoPeriod
        {
            get
            {
                return this._RecoPeriod;
            }
            set
            {
                if (this._RecoPeriod != value)
                {
                    this.OnRecoPeriodChanging(value);
                    this.SendPropertyChanging();
                    this._RecoPeriod = value;
                    this.SendPropertyChanged("RecoPeriod");
                    this.OnRecoPeriodChanged();
                }
            }
        }

    
        /// <summary>
        /// ?????????
        /// </summary>
        [Column(Name = @"reco_frequency", Storage = "_RecoFrequency", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> RecoFrequency
        {
            get
            {
                return this._RecoFrequency;
            }
            set
            {
                if (this._RecoFrequency != value)
                {
                    this.OnRecoFrequencyChanging(value);
                    this.SendPropertyChanging();
                    this._RecoFrequency = value;
                    this.SendPropertyChanged("RecoFrequency");
                    this.OnRecoFrequencyChanged();
                }
            }
        }

    
        /// <summary>
        /// ???
        /// </summary>
        [Column(Name = @"add_date", Storage = "_AddDate", DbType = "TIMESTAMP(6) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> AddDate
        {
            get
            {
                return this._AddDate;
            }
            set
            {
                if (this._AddDate != value)
                {
                    this.OnAddDateChanging(value);
                    this.SendPropertyChanging();
                    this._AddDate = value;
                    this.SendPropertyChanged("AddDate");
                    this.OnAddDateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// ????food_recommendation??food_recommendation???????
    /// </summary>
    [Table(Name = @"fooddb.food_recommendation_json")]
    public partial class FoodRecommendationJson : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _UserId;

        private byte[] _JsonCode;

        private System.Nullable<System.DateTime> _TimeStamp;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnJsonCodeChanging(byte[] value);
        partial void OnJsonCodeChanged();
        partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
        partial void OnTimeStampChanged();
        #endregion

        public FoodRecommendationJson()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for JsonCode in the schema.
        /// </summary>
        [Column(Name = @"json_code", Storage = "_JsonCode", DbType = "BLOB NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] JsonCode
        {
            get
            {
                return this._JsonCode;
            }
            set
            {
                if (this._JsonCode != value)
                {
                    this.OnJsonCodeChanging(value);
                    this.SendPropertyChanging();
                    this._JsonCode = value;
                    this.SendPropertyChanged("JsonCode");
                    this.OnJsonCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TimeStamp in the schema.
        /// </summary>
        [Column(Name = @"time_stamp", Storage = "_TimeStamp", DbType = "TIMESTAMP(6) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> TimeStamp
        {
            get
            {
                return this._TimeStamp;
            }
            set
            {
                if (this._TimeStamp != value)
                {
                    this.OnTimeStampChanging(value);
                    this.SendPropertyChanging();
                    this._TimeStamp = value;
                    this.SendPropertyChanged("TimeStamp");
                    this.OnTimeStampChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// ????????/????
    /// </summary>
    [Table(Name = @"fooddb.note_box")]
    public partial class NoteBox : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _BoxId;

        private string _BoxName;

        private System.Nullable<int> _BoxType;

        private string _BoxPlanFrequency;

        private string _BoxPlanFrequencyUnit;

        private System.Nullable<System.DateTime> _BoxPlanTime;

        private System.Nullable<System.DateTime> _TimeStamp;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnBoxIdChanging(int value);
        partial void OnBoxIdChanged();
        partial void OnBoxNameChanging(string value);
        partial void OnBoxNameChanged();
        partial void OnBoxTypeChanging(System.Nullable<int> value);
        partial void OnBoxTypeChanged();
        partial void OnBoxPlanFrequencyChanging(string value);
        partial void OnBoxPlanFrequencyChanged();
        partial void OnBoxPlanFrequencyUnitChanging(string value);
        partial void OnBoxPlanFrequencyUnitChanged();
        partial void OnBoxPlanTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnBoxPlanTimeChanged();
        partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
        partial void OnTimeStampChanged();
        #endregion

        public NoteBox()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for BoxId in the schema.
        /// </summary>
        [Column(Name = @"box_id", Storage = "_BoxId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int BoxId
        {
            get
            {
                return this._BoxId;
            }
            set
            {
                if (this._BoxId != value)
                {
                    this.OnBoxIdChanging(value);
                    this.SendPropertyChanging();
                    this._BoxId = value;
                    this.SendPropertyChanged("BoxId");
                    this.OnBoxIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BoxName in the schema.
        /// </summary>
        [Column(Name = @"box_name", Storage = "_BoxName", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string BoxName
        {
            get
            {
                return this._BoxName;
            }
            set
            {
                if (this._BoxName != value)
                {
                    this.OnBoxNameChanging(value);
                    this.SendPropertyChanging();
                    this._BoxName = value;
                    this.SendPropertyChanged("BoxName");
                    this.OnBoxNameChanged();
                }
            }
        }

    
        /// <summary>
        /// 0???????1???????2??????
        /// </summary>
        [Column(Name = @"box_type", Storage = "_BoxType", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BoxType
        {
            get
            {
                return this._BoxType;
            }
            set
            {
                if (this._BoxType != value)
                {
                    this.OnBoxTypeChanging(value);
                    this.SendPropertyChanging();
                    this._BoxType = value;
                    this.SendPropertyChanged("BoxType");
                    this.OnBoxTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BoxPlanFrequency in the schema.
        /// </summary>
        [Column(Name = @"box_plan_frequency", Storage = "_BoxPlanFrequency", DbType = "VARCHAR(128) NULL", UpdateCheck = UpdateCheck.Never)]
        public string BoxPlanFrequency
        {
            get
            {
                return this._BoxPlanFrequency;
            }
            set
            {
                if (this._BoxPlanFrequency != value)
                {
                    this.OnBoxPlanFrequencyChanging(value);
                    this.SendPropertyChanging();
                    this._BoxPlanFrequency = value;
                    this.SendPropertyChanged("BoxPlanFrequency");
                    this.OnBoxPlanFrequencyChanged();
                }
            }
        }

    
        /// <summary>
        /// h:hourly; d:daily; w:weekly; m:monthly
        /// </summary>
        [Column(Name = @"box_plan_frequency_unit", Storage = "_BoxPlanFrequencyUnit", DbType = "CHAR(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public string BoxPlanFrequencyUnit
        {
            get
            {
                return this._BoxPlanFrequencyUnit;
            }
            set
            {
                if (this._BoxPlanFrequencyUnit != value)
                {
                    this.OnBoxPlanFrequencyUnitChanging(value);
                    this.SendPropertyChanging();
                    this._BoxPlanFrequencyUnit = value;
                    this.SendPropertyChanged("BoxPlanFrequencyUnit");
                    this.OnBoxPlanFrequencyUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// ??????????
        /// </summary>
        [Column(Name = @"box_plan_time", Storage = "_BoxPlanTime", DbType = "DATETIME(6) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> BoxPlanTime
        {
            get
            {
                return this._BoxPlanTime;
            }
            set
            {
                if (this._BoxPlanTime != value)
                {
                    this.OnBoxPlanTimeChanging(value);
                    this.SendPropertyChanging();
                    this._BoxPlanTime = value;
                    this.SendPropertyChanged("BoxPlanTime");
                    this.OnBoxPlanTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TimeStamp in the schema.
        /// </summary>
        [Column(Name = @"time_stamp", Storage = "_TimeStamp", DbType = "TIMESTAMP(6) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> TimeStamp
        {
            get
            {
                return this._TimeStamp;
            }
            set
            {
                if (this._TimeStamp != value)
                {
                    this.OnTimeStampChanging(value);
                    this.SendPropertyChanging();
                    this._TimeStamp = value;
                    this.SendPropertyChanged("TimeStamp");
                    this.OnTimeStampChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.NoteBoxTemplate in the schema.
    /// </summary>
    [Table(Name = @"fooddb.note_box_template")]
    public partial class NoteBoxTemplate : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private System.Nullable<int> _BoxId;

        private string _FieldName;

        private string _FieldType;

        private string _FieldUnit;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnBoxIdChanging(System.Nullable<int> value);
        partial void OnBoxIdChanged();
        partial void OnFieldNameChanging(string value);
        partial void OnFieldNameChanged();
        partial void OnFieldTypeChanging(string value);
        partial void OnFieldTypeChanged();
        partial void OnFieldUnitChanging(string value);
        partial void OnFieldUnitChanged();
        #endregion

        public NoteBoxTemplate()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BoxId in the schema.
        /// </summary>
        [Column(Name = @"box_id", Storage = "_BoxId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BoxId
        {
            get
            {
                return this._BoxId;
            }
            set
            {
                if (this._BoxId != value)
                {
                    this.OnBoxIdChanging(value);
                    this.SendPropertyChanging();
                    this._BoxId = value;
                    this.SendPropertyChanged("BoxId");
                    this.OnBoxIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FieldName in the schema.
        /// </summary>
        [Column(Name = @"field_name", Storage = "_FieldName", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FieldName
        {
            get
            {
                return this._FieldName;
            }
            set
            {
                if (this._FieldName != value)
                {
                    this.OnFieldNameChanging(value);
                    this.SendPropertyChanging();
                    this._FieldName = value;
                    this.SendPropertyChanged("FieldName");
                    this.OnFieldNameChanged();
                }
            }
        }

    
        /// <summary>
        /// number/text/datetime/boolean
        /// </summary>
        [Column(Name = @"field_type", Storage = "_FieldType", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FieldType
        {
            get
            {
                return this._FieldType;
            }
            set
            {
                if (this._FieldType != value)
                {
                    this.OnFieldTypeChanging(value);
                    this.SendPropertyChanging();
                    this._FieldType = value;
                    this.SendPropertyChanged("FieldType");
                    this.OnFieldTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// ?????????????
        /// </summary>
        [Column(Name = @"field_unit", Storage = "_FieldUnit", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FieldUnit
        {
            get
            {
                return this._FieldUnit;
            }
            set
            {
                if (this._FieldUnit != value)
                {
                    this.OnFieldUnitChanging(value);
                    this.SendPropertyChanging();
                    this._FieldUnit = value;
                    this.SendPropertyChanged("FieldUnit");
                    this.OnFieldUnitChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.NoteRecord in the schema.
    /// </summary>
    [Table(Name = @"fooddb.note_record")]
    public partial class NoteRecord : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _RecordId;

        private System.Nullable<int> _BoxId;

        private System.Nullable<System.DateTime> _RecordTime;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRecordIdChanging(int value);
        partial void OnRecordIdChanged();
        partial void OnBoxIdChanging(System.Nullable<int> value);
        partial void OnBoxIdChanged();
        partial void OnRecordTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnRecordTimeChanged();
        #endregion

        public NoteRecord()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RecordId in the schema.
        /// </summary>
        [Column(Name = @"record_id", Storage = "_RecordId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int RecordId
        {
            get
            {
                return this._RecordId;
            }
            set
            {
                if (this._RecordId != value)
                {
                    this.OnRecordIdChanging(value);
                    this.SendPropertyChanging();
                    this._RecordId = value;
                    this.SendPropertyChanged("RecordId");
                    this.OnRecordIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BoxId in the schema.
        /// </summary>
        [Column(Name = @"box_id", Storage = "_BoxId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BoxId
        {
            get
            {
                return this._BoxId;
            }
            set
            {
                if (this._BoxId != value)
                {
                    this.OnBoxIdChanging(value);
                    this.SendPropertyChanging();
                    this._BoxId = value;
                    this.SendPropertyChanged("BoxId");
                    this.OnBoxIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecordTime in the schema.
        /// </summary>
        [Column(Name = @"record_time", Storage = "_RecordTime", DbType = "DATETIME(6) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> RecordTime
        {
            get
            {
                return this._RecordTime;
            }
            set
            {
                if (this._RecordTime != value)
                {
                    this.OnRecordTimeChanging(value);
                    this.SendPropertyChanging();
                    this._RecordTime = value;
                    this.SendPropertyChanged("RecordTime");
                    this.OnRecordTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// ?????
    /// </summary>
    [Table(Name = @"fooddb.note_record_items")]
    public partial class NoteRecordItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private System.Nullable<int> _RecordId;

        private string _ItemName;

        private string _ItemValue;

        private string _ItemType;

        private string _ItemUnit;

        private System.Nullable<System.DateTime> _TimeStamp;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnRecordIdChanging(System.Nullable<int> value);
        partial void OnRecordIdChanged();
        partial void OnItemNameChanging(string value);
        partial void OnItemNameChanged();
        partial void OnItemValueChanging(string value);
        partial void OnItemValueChanged();
        partial void OnItemTypeChanging(string value);
        partial void OnItemTypeChanged();
        partial void OnItemUnitChanging(string value);
        partial void OnItemUnitChanged();
        partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
        partial void OnTimeStampChanged();
        #endregion

        public NoteRecordItem()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecordId in the schema.
        /// </summary>
        [Column(Name = @"record_id", Storage = "_RecordId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> RecordId
        {
            get
            {
                return this._RecordId;
            }
            set
            {
                if (this._RecordId != value)
                {
                    this.OnRecordIdChanging(value);
                    this.SendPropertyChanging();
                    this._RecordId = value;
                    this.SendPropertyChanged("RecordId");
                    this.OnRecordIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemName in the schema.
        /// </summary>
        [Column(Name = @"item_name", Storage = "_ItemName", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ItemName
        {
            get
            {
                return this._ItemName;
            }
            set
            {
                if (this._ItemName != value)
                {
                    this.OnItemNameChanging(value);
                    this.SendPropertyChanging();
                    this._ItemName = value;
                    this.SendPropertyChanged("ItemName");
                    this.OnItemNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemValue in the schema.
        /// </summary>
        [Column(Name = @"item_value", Storage = "_ItemValue", DbType = "VARCHAR(256) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ItemValue
        {
            get
            {
                return this._ItemValue;
            }
            set
            {
                if (this._ItemValue != value)
                {
                    this.OnItemValueChanging(value);
                    this.SendPropertyChanging();
                    this._ItemValue = value;
                    this.SendPropertyChanged("ItemValue");
                    this.OnItemValueChanged();
                }
            }
        }

    
        /// <summary>
        /// number/text/datetime/boolean
        /// </summary>
        [Column(Name = @"item_type", Storage = "_ItemType", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ItemType
        {
            get
            {
                return this._ItemType;
            }
            set
            {
                if (this._ItemType != value)
                {
                    this.OnItemTypeChanging(value);
                    this.SendPropertyChanging();
                    this._ItemType = value;
                    this.SendPropertyChanged("ItemType");
                    this.OnItemTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ItemUnit in the schema.
        /// </summary>
        [Column(Name = @"item_unit", Storage = "_ItemUnit", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ItemUnit
        {
            get
            {
                return this._ItemUnit;
            }
            set
            {
                if (this._ItemUnit != value)
                {
                    this.OnItemUnitChanging(value);
                    this.SendPropertyChanging();
                    this._ItemUnit = value;
                    this.SendPropertyChanged("ItemUnit");
                    this.OnItemUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TimeStamp in the schema.
        /// </summary>
        [Column(Name = @"time_stamp", Storage = "_TimeStamp", DbType = "TIMESTAMP(6) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> TimeStamp
        {
            get
            {
                return this._TimeStamp;
            }
            set
            {
                if (this._TimeStamp != value)
                {
                    this.OnTimeStampChanging(value);
                    this.SendPropertyChanging();
                    this._TimeStamp = value;
                    this.SendPropertyChanged("TimeStamp");
                    this.OnTimeStampChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// ??/?????????
    /// </summary>
    [Table(Name = @"fooddb.plan_reminder")]
    public partial class PlanReminder : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _PlanId;

        private string _UserId;

        private string _PlanName;

        private string _PlanFreguency;

        private string _PlanFrequencyUnit;

        private System.Nullable<System.DateTime> _PlanStartDate;

        private System.Nullable<System.DateTime> _PlanEndDate;

        private System.Nullable<int> _PlanStatus;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnPlanIdChanging(int value);
        partial void OnPlanIdChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnPlanNameChanging(string value);
        partial void OnPlanNameChanged();
        partial void OnPlanFreguencyChanging(string value);
        partial void OnPlanFreguencyChanged();
        partial void OnPlanFrequencyUnitChanging(string value);
        partial void OnPlanFrequencyUnitChanged();
        partial void OnPlanStartDateChanging(System.Nullable<System.DateTime> value);
        partial void OnPlanStartDateChanged();
        partial void OnPlanEndDateChanging(System.Nullable<System.DateTime> value);
        partial void OnPlanEndDateChanged();
        partial void OnPlanStatusChanging(System.Nullable<int> value);
        partial void OnPlanStatusChanged();
        #endregion

        public PlanReminder()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for PlanId in the schema.
        /// </summary>
        [Column(Name = @"plan_id", Storage = "_PlanId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int PlanId
        {
            get
            {
                return this._PlanId;
            }
            set
            {
                if (this._PlanId != value)
                {
                    this.OnPlanIdChanging(value);
                    this.SendPropertyChanging();
                    this._PlanId = value;
                    this.SendPropertyChanged("PlanId");
                    this.OnPlanIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PlanName in the schema.
        /// </summary>
        [Column(Name = @"plan_name", Storage = "_PlanName", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PlanName
        {
            get
            {
                return this._PlanName;
            }
            set
            {
                if (this._PlanName != value)
                {
                    this.OnPlanNameChanging(value);
                    this.SendPropertyChanging();
                    this._PlanName = value;
                    this.SendPropertyChanged("PlanName");
                    this.OnPlanNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PlanFreguency in the schema.
        /// </summary>
        [Column(Name = @"plan_freguency", Storage = "_PlanFreguency", DbType = "VARCHAR(256) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PlanFreguency
        {
            get
            {
                return this._PlanFreguency;
            }
            set
            {
                if (this._PlanFreguency != value)
                {
                    this.OnPlanFreguencyChanging(value);
                    this.SendPropertyChanging();
                    this._PlanFreguency = value;
                    this.SendPropertyChanged("PlanFreguency");
                    this.OnPlanFreguencyChanged();
                }
            }
        }

    
        /// <summary>
        /// h/d/w/m
        /// </summary>
        [Column(Name = @"plan_frequency_unit", Storage = "_PlanFrequencyUnit", DbType = "CHAR(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PlanFrequencyUnit
        {
            get
            {
                return this._PlanFrequencyUnit;
            }
            set
            {
                if (this._PlanFrequencyUnit != value)
                {
                    this.OnPlanFrequencyUnitChanging(value);
                    this.SendPropertyChanging();
                    this._PlanFrequencyUnit = value;
                    this.SendPropertyChanged("PlanFrequencyUnit");
                    this.OnPlanFrequencyUnitChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PlanStartDate in the schema.
        /// </summary>
        [Column(Name = @"plan_start_date", Storage = "_PlanStartDate", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> PlanStartDate
        {
            get
            {
                return this._PlanStartDate;
            }
            set
            {
                if (this._PlanStartDate != value)
                {
                    this.OnPlanStartDateChanging(value);
                    this.SendPropertyChanging();
                    this._PlanStartDate = value;
                    this.SendPropertyChanged("PlanStartDate");
                    this.OnPlanStartDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PlanEndDate in the schema.
        /// </summary>
        [Column(Name = @"plan_end_date", Storage = "_PlanEndDate", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> PlanEndDate
        {
            get
            {
                return this._PlanEndDate;
            }
            set
            {
                if (this._PlanEndDate != value)
                {
                    this.OnPlanEndDateChanging(value);
                    this.SendPropertyChanging();
                    this._PlanEndDate = value;
                    this.SendPropertyChanged("PlanEndDate");
                    this.OnPlanEndDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PlanStatus in the schema.
        /// </summary>
        [Column(Name = @"plan_status", Storage = "_PlanStatus", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PlanStatus
        {
            get
            {
                return this._PlanStatus;
            }
            set
            {
                if (this._PlanStatus != value)
                {
                    this.OnPlanStatusChanging(value);
                    this.SendPropertyChanging();
                    this._PlanStatus = value;
                    this.SendPropertyChanged("PlanStatus");
                    this.OnPlanStatusChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.PlanReminderLog in the schema.
    /// </summary>
    [Table(Name = @"fooddb.plan_reminder_log")]
    public partial class PlanReminderLog : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private System.Nullable<int> _PlanId;

        private string _Log;

        private System.Nullable<System.DateTime> _TimeStamp;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnPlanIdChanging(System.Nullable<int> value);
        partial void OnPlanIdChanged();
        partial void OnLogChanging(string value);
        partial void OnLogChanged();
        partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
        partial void OnTimeStampChanged();
        #endregion

        public PlanReminderLog()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PlanId in the schema.
        /// </summary>
        [Column(Name = @"plan_id", Storage = "_PlanId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PlanId
        {
            get
            {
                return this._PlanId;
            }
            set
            {
                if (this._PlanId != value)
                {
                    this.OnPlanIdChanging(value);
                    this.SendPropertyChanging();
                    this._PlanId = value;
                    this.SendPropertyChanged("PlanId");
                    this.OnPlanIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Log in the schema.
        /// </summary>
        [Column(Name = @"log", Storage = "_Log", DbType = "VARCHAR(400) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Log
        {
            get
            {
                return this._Log;
            }
            set
            {
                if (this._Log != value)
                {
                    this.OnLogChanging(value);
                    this.SendPropertyChanging();
                    this._Log = value;
                    this.SendPropertyChanged("Log");
                    this.OnLogChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TimeStamp in the schema.
        /// </summary>
        [Column(Name = @"time_stamp", Storage = "_TimeStamp", DbType = "TIMESTAMP(6) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> TimeStamp
        {
            get
            {
                return this._TimeStamp;
            }
            set
            {
                if (this._TimeStamp != value)
                {
                    this.OnTimeStampChanging(value);
                    this.SendPropertyChanging();
                    this._TimeStamp = value;
                    this.SendPropertyChanged("TimeStamp");
                    this.OnTimeStampChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// ????
    /// </summary>
    [Table(Name = @"fooddb.symptom_food")]
    public partial class SymptomFood : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private System.Nullable<int> _SymptomId;

        private System.Nullable<int> _FoodId;

        private System.Nullable<int> _Suitability;

        private System.Nullable<int> _Intensity;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnSymptomIdChanging(System.Nullable<int> value);
        partial void OnSymptomIdChanged();
        partial void OnFoodIdChanging(System.Nullable<int> value);
        partial void OnFoodIdChanged();
        partial void OnSuitabilityChanging(System.Nullable<int> value);
        partial void OnSuitabilityChanged();
        partial void OnIntensityChanging(System.Nullable<int> value);
        partial void OnIntensityChanged();
        #endregion

        public SymptomFood()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SymptomId in the schema.
        /// </summary>
        [Column(Name = @"symptom_id", Storage = "_SymptomId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SymptomId
        {
            get
            {
                return this._SymptomId;
            }
            set
            {
                if (this._SymptomId != value)
                {
                    this.OnSymptomIdChanging(value);
                    this.SendPropertyChanging();
                    this._SymptomId = value;
                    this.SendPropertyChanged("SymptomId");
                    this.OnSymptomIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FoodId in the schema.
        /// </summary>
        [Column(Name = @"food_id", Storage = "_FoodId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> FoodId
        {
            get
            {
                return this._FoodId;
            }
            set
            {
                if (this._FoodId != value)
                {
                    this.OnFoodIdChanging(value);
                    this.SendPropertyChanging();
                    this._FoodId = value;
                    this.SendPropertyChanged("FoodId");
                    this.OnFoodIdChanged();
                }
            }
        }

    
        /// <summary>
        /// 0??1??
        /// </summary>
        [Column(Name = @"suitability", Storage = "_Suitability", DbType = "INT(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Suitability
        {
            get
            {
                return this._Suitability;
            }
            set
            {
                if (this._Suitability != value)
                {
                    this.OnSuitabilityChanging(value);
                    this.SendPropertyChanging();
                    this._Suitability = value;
                    this.SendPropertyChanged("Suitability");
                    this.OnSuitabilityChanged();
                }
            }
        }

    
        /// <summary>
        /// ????????0????1???????2??????3????????
        /// </summary>
        [Column(Name = @"intensity", Storage = "_Intensity", DbType = "INT(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> Intensity
        {
            get
            {
                return this._Intensity;
            }
            set
            {
                if (this._Intensity != value)
                {
                    this.OnIntensityChanging(value);
                    this.SendPropertyChanging();
                    this._Intensity = value;
                    this.SendPropertyChanged("Intensity");
                    this.OnIntensityChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.UserFoodSentiment in the schema.
    /// </summary>
    [Table(Name = @"fooddb.user_food_sentiment")]
    public partial class UserFoodSentiment : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _UserId;

        private System.Nullable<int> _CateId = 0;

        private System.Nullable<int> _FoodId = 0;

        private System.Nullable<bool> _Sentiment = false;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnCateIdChanging(System.Nullable<int> value);
        partial void OnCateIdChanged();
        partial void OnFoodIdChanging(System.Nullable<int> value);
        partial void OnFoodIdChanged();
        partial void OnSentimentChanging(System.Nullable<bool> value);
        partial void OnSentimentChanged();
        #endregion

        public UserFoodSentiment()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", IsPrimaryKey = true)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CateId in the schema.
        /// </summary>
        [Column(Name = @"cate_id", Storage = "_CateId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> CateId
        {
            get
            {
                return this._CateId;
            }
            set
            {
                if (this._CateId != value)
                {
                    this.OnCateIdChanging(value);
                    this.SendPropertyChanging();
                    this._CateId = value;
                    this.SendPropertyChanged("CateId");
                    this.OnCateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FoodId in the schema.
        /// </summary>
        [Column(Name = @"food_id", Storage = "_FoodId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> FoodId
        {
            get
            {
                return this._FoodId;
            }
            set
            {
                if (this._FoodId != value)
                {
                    this.OnFoodIdChanging(value);
                    this.SendPropertyChanging();
                    this._FoodId = value;
                    this.SendPropertyChanged("FoodId");
                    this.OnFoodIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sentiment in the schema.
        /// </summary>
        [Column(Name = @"sentiment", Storage = "_Sentiment", DbType = "BIT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Sentiment
        {
            get
            {
                return this._Sentiment;
            }
            set
            {
                if (this._Sentiment != value)
                {
                    this.OnSentimentChanging(value);
                    this.SendPropertyChanging();
                    this._Sentiment = value;
                    this.SendPropertyChanged("Sentiment");
                    this.OnSentimentChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.UserPregnant in the schema.
    /// </summary>
    [Table(Name = @"fooddb.user_pregnant")]
    public partial class UserPregnant : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _UserId;

        private System.Nullable<System.DateTime> _PregnantDate;

        private System.Nullable<int> _PregnantTimes;

        private System.Nullable<bool> _GotCold;

        private System.Nullable<System.DateTime> _ColdDate;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnPregnantDateChanging(System.Nullable<System.DateTime> value);
        partial void OnPregnantDateChanged();
        partial void OnPregnantTimesChanging(System.Nullable<int> value);
        partial void OnPregnantTimesChanged();
        partial void OnGotColdChanging(System.Nullable<bool> value);
        partial void OnGotColdChanged();
        partial void OnColdDateChanging(System.Nullable<System.DateTime> value);
        partial void OnColdDateChanged();
        #endregion

        public UserPregnant()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", CanBeNull = false, DbType = "VARCHAR(45) NOT NULL", IsPrimaryKey = true)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PregnantDate in the schema.
        /// </summary>
        [Column(Name = @"pregnant_date", Storage = "_PregnantDate", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> PregnantDate
        {
            get
            {
                return this._PregnantDate;
            }
            set
            {
                if (this._PregnantDate != value)
                {
                    this.OnPregnantDateChanging(value);
                    this.SendPropertyChanging();
                    this._PregnantDate = value;
                    this.SendPropertyChanged("PregnantDate");
                    this.OnPregnantDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PregnantTimes in the schema.
        /// </summary>
        [Column(Name = @"pregnant_times", Storage = "_PregnantTimes", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> PregnantTimes
        {
            get
            {
                return this._PregnantTimes;
            }
            set
            {
                if (this._PregnantTimes != value)
                {
                    this.OnPregnantTimesChanging(value);
                    this.SendPropertyChanging();
                    this._PregnantTimes = value;
                    this.SendPropertyChanged("PregnantTimes");
                    this.OnPregnantTimesChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GotCold in the schema.
        /// </summary>
        [Column(Name = @"got_cold", Storage = "_GotCold", DbType = "BIT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> GotCold
        {
            get
            {
                return this._GotCold;
            }
            set
            {
                if (this._GotCold != value)
                {
                    this.OnGotColdChanging(value);
                    this.SendPropertyChanging();
                    this._GotCold = value;
                    this.SendPropertyChanged("GotCold");
                    this.OnGotColdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ColdDate in the schema.
        /// </summary>
        [Column(Name = @"cold_date", Storage = "_ColdDate", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> ColdDate
        {
            get
            {
                return this._ColdDate;
            }
            set
            {
                if (this._ColdDate != value)
                {
                    this.OnColdDateChanging(value);
                    this.SendPropertyChanging();
                    this._ColdDate = value;
                    this.SendPropertyChanged("ColdDate");
                    this.OnColdDateChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.UserProfile in the schema.
    /// </summary>
    [Table(Name = @"fooddb.user_profile")]
    public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _UserId;

        private string _UserName;

        private string _UserNickname;

        private string _PhoneNumber;

        private string _EmailAddr;

        private System.Nullable<bool> _Gender;

        private System.Nullable<System.DateTime> _Birthday;

        private string _Location;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnUserNicknameChanging(string value);
        partial void OnUserNicknameChanged();
        partial void OnPhoneNumberChanging(string value);
        partial void OnPhoneNumberChanged();
        partial void OnEmailAddrChanging(string value);
        partial void OnEmailAddrChanged();
        partial void OnGenderChanging(System.Nullable<bool> value);
        partial void OnGenderChanged();
        partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
        partial void OnBirthdayChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        #endregion

        public UserProfile()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Name = @"user_name", Storage = "_UserName", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging();
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserNickname in the schema.
        /// </summary>
        [Column(Name = @"user_nickname", Storage = "_UserNickname", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserNickname
        {
            get
            {
                return this._UserNickname;
            }
            set
            {
                if (this._UserNickname != value)
                {
                    this.OnUserNicknameChanging(value);
                    this.SendPropertyChanging();
                    this._UserNickname = value;
                    this.SendPropertyChanged("UserNickname");
                    this.OnUserNicknameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhoneNumber in the schema.
        /// </summary>
        [Column(Name = @"phone_number", Storage = "_PhoneNumber", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PhoneNumber
        {
            get
            {
                return this._PhoneNumber;
            }
            set
            {
                if (this._PhoneNumber != value)
                {
                    this.OnPhoneNumberChanging(value);
                    this.SendPropertyChanging();
                    this._PhoneNumber = value;
                    this.SendPropertyChanged("PhoneNumber");
                    this.OnPhoneNumberChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EmailAddr in the schema.
        /// </summary>
        [Column(Name = @"Email_addr", Storage = "_EmailAddr", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string EmailAddr
        {
            get
            {
                return this._EmailAddr;
            }
            set
            {
                if (this._EmailAddr != value)
                {
                    this.OnEmailAddrChanging(value);
                    this.SendPropertyChanging();
                    this._EmailAddr = value;
                    this.SendPropertyChanged("EmailAddr");
                    this.OnEmailAddrChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gender in the schema.
        /// </summary>
        [Column(Name = @"gender", Storage = "_Gender", DbType = "BIT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> Gender
        {
            get
            {
                return this._Gender;
            }
            set
            {
                if (this._Gender != value)
                {
                    this.OnGenderChanging(value);
                    this.SendPropertyChanging();
                    this._Gender = value;
                    this.SendPropertyChanged("Gender");
                    this.OnGenderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Birthday in the schema.
        /// </summary>
        [Column(Name = @"birthday", Storage = "_Birthday", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> Birthday
        {
            get
            {
                return this._Birthday;
            }
            set
            {
                if (this._Birthday != value)
                {
                    this.OnBirthdayChanging(value);
                    this.SendPropertyChanging();
                    this._Birthday = value;
                    this.SendPropertyChanged("Birthday");
                    this.OnBirthdayChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Location in the schema.
        /// </summary>
        [Column(Name = @"location", Storage = "_Location", DbType = "VARCHAR(100) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Location
        {
            get
            {
                return this._Location;
            }
            set
            {
                if (this._Location != value)
                {
                    this.OnLocationChanging(value);
                    this.SendPropertyChanging();
                    this._Location = value;
                    this.SendPropertyChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.UserProfileExtension in the schema.
    /// </summary>
    [Table(Name = @"fooddb.user_profile_extension")]
    public partial class UserProfileExtension : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _UserId;

        private System.Nullable<int> _MetaId;

        private string _ExtValue;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnMetaIdChanging(System.Nullable<int> value);
        partial void OnMetaIdChanged();
        partial void OnExtValueChanging(string value);
        partial void OnExtValueChanged();
        #endregion

        public UserProfileExtension()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MetaId in the schema.
        /// </summary>
        [Column(Name = @"meta_id", Storage = "_MetaId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MetaId
        {
            get
            {
                return this._MetaId;
            }
            set
            {
                if (this._MetaId != value)
                {
                    this.OnMetaIdChanging(value);
                    this.SendPropertyChanging();
                    this._MetaId = value;
                    this.SendPropertyChanged("MetaId");
                    this.OnMetaIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ExtValue in the schema.
        /// </summary>
        [Column(Name = @"ext_value", Storage = "_ExtValue", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ExtValue
        {
            get
            {
                return this._ExtValue;
            }
            set
            {
                if (this._ExtValue != value)
                {
                    this.OnExtValueChanging(value);
                    this.SendPropertyChanging();
                    this._ExtValue = value;
                    this.SendPropertyChanged("ExtValue");
                    this.OnExtValueChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.UserProfileMeta in the schema.
    /// </summary>
    [Table(Name = @"fooddb.user_profile_meta")]
    public partial class UserProfileMeta : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _MetaId;

        private string _MetaName;

        private string _MetaType;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnMetaIdChanging(int value);
        partial void OnMetaIdChanged();
        partial void OnMetaNameChanging(string value);
        partial void OnMetaNameChanged();
        partial void OnMetaTypeChanging(string value);
        partial void OnMetaTypeChanged();
        #endregion

        public UserProfileMeta()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for MetaId in the schema.
        /// </summary>
        [Column(Name = @"meta_id", Storage = "_MetaId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int MetaId
        {
            get
            {
                return this._MetaId;
            }
            set
            {
                if (this._MetaId != value)
                {
                    this.OnMetaIdChanging(value);
                    this.SendPropertyChanging();
                    this._MetaId = value;
                    this.SendPropertyChanged("MetaId");
                    this.OnMetaIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MetaName in the schema.
        /// </summary>
        [Column(Name = @"meta_name", Storage = "_MetaName", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MetaName
        {
            get
            {
                return this._MetaName;
            }
            set
            {
                if (this._MetaName != value)
                {
                    this.OnMetaNameChanging(value);
                    this.SendPropertyChanging();
                    this._MetaName = value;
                    this.SendPropertyChanged("MetaName");
                    this.OnMetaNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MetaType in the schema.
        /// </summary>
        [Column(Name = @"meta_type", Storage = "_MetaType", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string MetaType
        {
            get
            {
                return this._MetaType;
            }
            set
            {
                if (this._MetaType != value)
                {
                    this.OnMetaTypeChanging(value);
                    this.SendPropertyChanging();
                    this._MetaType = value;
                    this.SendPropertyChanged("MetaType");
                    this.OnMetaTypeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.UserSymptom in the schema.
    /// </summary>
    [Table(Name = @"fooddb.user_symptom")]
    public partial class UserSymptom : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _UserId;

        private System.Nullable<int> _SymptomId;

        private System.Nullable<bool> _SymptomCheck;

        private string _SymptomDesc;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserIdChanging(string value);
        partial void OnUserIdChanged();
        partial void OnSymptomIdChanging(System.Nullable<int> value);
        partial void OnSymptomIdChanged();
        partial void OnSymptomCheckChanging(System.Nullable<bool> value);
        partial void OnSymptomCheckChanged();
        partial void OnSymptomDescChanging(string value);
        partial void OnSymptomDescChanged();
        #endregion

        public UserSymptom()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Name = @"user_id", Storage = "_UserId", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SymptomId in the schema.
        /// </summary>
        [Column(Name = @"symptom_id", Storage = "_SymptomId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> SymptomId
        {
            get
            {
                return this._SymptomId;
            }
            set
            {
                if (this._SymptomId != value)
                {
                    this.OnSymptomIdChanging(value);
                    this.SendPropertyChanging();
                    this._SymptomId = value;
                    this.SendPropertyChanged("SymptomId");
                    this.OnSymptomIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SymptomCheck in the schema.
        /// </summary>
        [Column(Name = @"symptom_check", Storage = "_SymptomCheck", DbType = "BIT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> SymptomCheck
        {
            get
            {
                return this._SymptomCheck;
            }
            set
            {
                if (this._SymptomCheck != value)
                {
                    this.OnSymptomCheckChanging(value);
                    this.SendPropertyChanging();
                    this._SymptomCheck = value;
                    this.SendPropertyChanged("SymptomCheck");
                    this.OnSymptomCheckChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SymptomDesc in the schema.
        /// </summary>
        [Column(Name = @"symptom_desc", Storage = "_SymptomDesc", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string SymptomDesc
        {
            get
            {
                return this._SymptomDesc;
            }
            set
            {
                if (this._SymptomDesc != value)
                {
                    this.OnSymptomDescChanging(value);
                    this.SendPropertyChanging();
                    this._SymptomDesc = value;
                    this.SendPropertyChanged("SymptomDesc");
                    this.OnSymptomDescChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for FooddbContext.UserSymptomMeta in the schema.
    /// </summary>
    [Table(Name = @"fooddb.user_symptom_meta")]
    public partial class UserSymptomMeta : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _SymptomId;

        private string _SymptomName;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnSymptomIdChanging(int value);
        partial void OnSymptomIdChanged();
        partial void OnSymptomNameChanging(string value);
        partial void OnSymptomNameChanged();
        #endregion

        public UserSymptomMeta()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SymptomId in the schema.
        /// </summary>
        [Column(Name = @"symptom_id", Storage = "_SymptomId", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int SymptomId
        {
            get
            {
                return this._SymptomId;
            }
            set
            {
                if (this._SymptomId != value)
                {
                    this.OnSymptomIdChanging(value);
                    this.SendPropertyChanging();
                    this._SymptomId = value;
                    this.SendPropertyChanged("SymptomId");
                    this.OnSymptomIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SymptomName in the schema.
        /// </summary>
        [Column(Name = @"symptom_name", Storage = "_SymptomName", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string SymptomName
        {
            get
            {
                return this._SymptomName;
            }
            set
            {
                if (this._SymptomName != value)
                {
                    this.OnSymptomNameChanging(value);
                    this.SendPropertyChanging();
                    this._SymptomName = value;
                    this.SendPropertyChanged("SymptomName");
                    this.OnSymptomNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
